// Generated by CoffeeScript 1.4.0
(function() {
  var Action, AddRemProvider, ApplyMorphism, CayleyTableVis, Group, Id, IsSubGroup, MorphismVis, MulElAndSet, OUTDEVICE_ID, RawDataParser, SimpleMul, SimplePointsVis, SimpleVis, actions_pool, determine_dp, operation_pool, process_data, providers, vis_pool,
    __slice = [].slice;

  Group = (function() {

    function Group(mult_t, one, inv, el_to_int, members) {
      this.mult_t = mult_t;
      this.one = one;
      this.inv = inv;
      this.el_to_int = el_to_int;
      this.members = members;
    }

    Group.prototype.get_members = function() {
      return this.members;
    };

    Group.prototype.get_inverse = function(x) {
      return inv[x];
    };

    Group.prototype.mul_a_b = function(a, b) {
      return this.mult_t[this.el_to_int[a]][this.el_to_int[b]];
    };

    Group.prototype.is_member = function(x) {
      return this.el_to_int[a] != null;
    };

    return Group;

  })();

  AddRemProvider = (function() {

    function AddRemProvider() {}

    AddRemProvider.prototype.parse = function(data) {
      var el_to_int, elems, fst, i, inv, max, mult_t, tmp_el, _i, _j, _k, _len, _ref, _ref1, _results;
      max = data[0];
      elems = (function() {
        _results = [];
        for (var _i = 0, _ref = max - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      el_to_int = {};
      inv = {};
      for (_j = 0, _len = elems.length; _j < _len; _j++) {
        i = elems[_j];
        el_to_int[i] = i;
        inv[i] = Math.abs(max - i);
      }
      mult_t = [];
      tmp_el = elems.slice(0);
      for (i = _k = 0, _ref1 = max - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
        mult_t.push(tmp_el);
        fst = tmp_el[0];
        tmp_el = tmp_el.slice(1);
        tmp_el.push(fst);
      }
      return new Group(mult_t, 0, inv, el_to_int, elems.slice(0));
    };

    return AddRemProvider;

  })();

  RawDataParser = (function() {

    function RawDataParser() {}

    RawDataParser.prototype.parse = function() {};

    return RawDataParser;

  })();

  MulElAndSet = (function() {

    function MulElAndSet() {}

    MulElAndSet.prototype.exec = function(el, set, group) {
      var set_el;
      if (group.is_member(el)) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = set.length; _i < _len; _i++) {
            set_el = set[_i];
            _results.push(group.mul_a_b(el, set_el));
          }
          return _results;
        })();
      }
    };

    return MulElAndSet;

  })();

  SimpleMul = (function() {

    function SimpleMul() {}

    SimpleMul.prototype.exec = function(obj, args) {
      return obj.mul_a_b(args[0], args[1]);
    };

    return SimpleMul;

  })();

  IsSubGroup = (function() {

    function IsSubGroup() {}

    IsSubGroup.prototype.exec = function(base, sub) {
      var i, sub_is_part_of_base;
      if (!(base.one === sub.one)) {
        return false;
      }
      sub_is_part_of_base = ((function() {
        var _i, _len, _ref, _results;
        _ref = sub.members;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(base.is_member(i));
        }
        return _results;
      })()).reduce(function(a, b) {
        return a && b;
      });
      if (!sub_is_part_of_base) {
        return false;
      }
      return true;
    };

    return IsSubGroup;

  })();

  Id = (function() {

    function Id() {}

    Id.prototype.exec = function(obj) {
      return obj;
    };

    return Id;

  })();

  ApplyMorphism = (function() {

    function ApplyMorphism() {}

    ApplyMorphism.prototype.exec = function(group, morph) {
      var el, _i, _len, _ref, _results;
      _ref = group.members;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(morph(el));
      }
      return _results;
    };

    return ApplyMorphism;

  })();

  operation_pool = {
    "ID": new Id,
    "a*b": new SimpleMul,
    "g*H": new MulElAndSet,
    "isSub": new IsSubGroup,
    "f(g)": new ApplyMorphism
  };

  OUTDEVICE_ID = "#grot";

  SimpleVis = (function() {

    function SimpleVis() {}

    SimpleVis.prototype.show = function(data) {
      return alert(data);
    };

    return SimpleVis;

  })();

  SimplePointsVis = (function() {

    function SimplePointsVis() {}

    SimplePointsVis.prototype.show = function(data) {
      var g, sampleSVG;
      sampleSVG = d3.select(OUTDEVICE_ID).append("svg").attr("width", 700).attr("height", 600);
      g = sampleSVG.selectAll("g.node").data(data).enter().append("svg:g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      g.append("svg:circle").attr("r", 20).attr("cx", function(d, i) {
        return 50 * i + 50;
      }).attr("cy", 50).style("fill", "white").style("stroke", "gray");
      return g.append("svg:text").attr("x", function(d, i) {
        return 50 * i + 50;
      }).attr("y", 50).attr("dy", "0.5ex").text(function(d) {
        return d;
      });
    };

    return SimplePointsVis;

  })();

  CayleyTableVis = (function() {

    function CayleyTableVis() {}

    CayleyTableVis.prototype.show = function(data) {
      var baseX, circle, deltaX, deltaY, force, h, i, ind, j, links, memb, nodes, path, structure, svg, text, text_links, w, _i, _j, _k, _len, _ref, _ref1, _ref2;
      structure = data[0];
      links = [];
      for (i = _i = 0, _ref = structure.get_members().length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = structure.get_members().length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          links.push({
            source: i,
            src: i,
            dest: structure.mul_a_b(i, j),
            target: structure.mul_a_b(i, j),
            label: j,
            type: "plain"
          });
        }
      }
      nodes = [];
      deltaX = 140;
      deltaY = 140;
      baseX = 50;
      ind = 0;
      _ref2 = structure.get_members();
      for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
        memb = _ref2[_k];
        nodes.push({
          x: baseX + (ind % 2 === 0 ? deltaX : 0),
          y: 20 + (ind % 2 !== 0 ? deltaY : 0),
          ind: memb,
          name: memb,
          fixed: 1
        });
        ind += 1;
        baseX += ind % 2 === 0 ? 50 : 0;
      }
      w = 600;
      h = 400;
      force = d3.layout.force().nodes(d3.values(nodes)).links(links).size([w, h]).linkDistance(60).charge(10).start();
      svg = d3.select(OUTDEVICE_ID).append("svg:svg").attr("width", w).attr("height", h);
      svg.append("svg:defs").selectAll("marker").data(["plain", "dotted"]).enter().append("svg:marker").attr("id", String).attr("viewBox", "0 -5 10 10").attr("refX", 15).attr("refY", -1.5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("svg:path").attr("d", "M0,-5L10,0L0,0");
      path = svg.append("svg:g").selectAll("path").data(force.links()).enter().append("svg:path").attr("class", function(d) {
        return "link " + d.type;
      }).attr("marker-end", function(d) {
        return "url(#" + d.type + ")";
      }).attr("src", function(d) {
        return d.src;
      }).attr("dst", function(d) {
        return d.dest;
      }).attr("id", function(d) {
        return d.src + "_" + d.dest;
      });
      circle = svg.append("svg:g").selectAll("circle").data(force.nodes()).enter().append("svg:circle").attr("r", 6).style("fill", "gray").on("mouseover", function(d) {
        d3.select(this).style("fill", "orange");
        return d3.selectAll("path.link").filter(function(el) {
          return el.src === d.ind;
        }).attr("class", "link selected");
      }).on("mouseout", function() {
        d3.select(this).style("fill", "gray");
        return d3.selectAll("path").attr("class", "link plain");
      }).call(force.drag);
      text = svg.append("svg:g").selectAll("g").data(force.nodes()).enter().append("svg:g");
      text.append("svg:text").attr("x", 8).attr("y", ".31em").text(function(d) {
        return d.name;
      });
      text_links = svg.append("svg:g").selectAll("g").data(force.links()).enter().append("svg:g").append("svg:text").attr("style", "text-anchor:middle").append("svg:textPath").attr("xlink:href", function(d) {
        return "#" + d.src + "_" + d.dest;
      }).attr("startOffset", "120").text(function(d) {
        return d.label;
      });
      return force.on("tick", function(e) {
        circle.attr("transform", function(d) {
          return "translate(" + d.x + ", " + d.y + ")";
        });
        text.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
        return path.attr("d", function(d) {
          var dr, dx, dy;
          dx = d.target.x - d.source.x;
          dy = d.target.y - d.source.y;
          dr = Math.sqrt(dx * dx + dy * dy) * 2;
          return "M" + d.source.x + ", " + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
        });
      });
    };

    return CayleyTableVis;

  })();

  MorphismVis = (function() {

    function MorphismVis() {}

    MorphismVis.prototype.show = function(data) {
      var a_count, b_count, circle, ellipse_a, ellipse_b, force, h, links, max_ay, max_by, nodes, path, svg, t, text, w;
      nodes = [];
      data.from.elements.forEach(function(d, i) {
        return nodes.push({
          x: 100,
          y: 100,
          cluster: 1,
          name: d,
          fixed: 1
        });
      });
      data.to.elements.forEach(function(d, i) {
        return nodes.push({
          x: 100,
          y: 100,
          cluster: 2,
          name: d,
          fixed: 1
        });
      });
      links = [];
      data.from.elements.forEach(function(d, i) {
        return links.push({
          source: d,
          target: data.from.elements.length + data.map_index(d),
          type: "plain"
        });
      });
      console.log(links);
      w = 960;
      h = 500;
      t = 50;
      a_count = 1;
      b_count = 1;
      max_ay = 0;
      max_by = 0;
      nodes.forEach(function(d, i) {
        console.log(d);
        if (d.cluster === 2) {
          d.x = t + w / 2;
          d.y = (b_count++) * 50;
          return max_by = Math.max(d.y, max_by);
        } else {
          d.x = t;
          d.y = (a_count++) * 50;
          return max_ay = Math.max(d.y, max_ay);
        }
      });
      force = d3.layout.force().nodes(d3.values(nodes)).links(links).size([w, h]).linkDistance(60).charge(10).start();
      svg = d3.select(OUTDEVICE_ID).append("svg:svg").attr("width", w).attr("height", h);
      ellipse_a = svg.append("svg:ellipse").attr("fill", "none").attr("stroke", "#000");
      ellipse_b = svg.append("svg:ellipse").attr("fill", "none").attr("stroke", "#000");
      ellipse_a.attr("cx", t);
      ellipse_a.attr("cy", 25 + max_ay / 2);
      ellipse_a.attr("ry", max_ay / 2);
      ellipse_a.attr("rx", 50);
      ellipse_b.attr("cx", t + w / 2);
      ellipse_b.attr("cy", 25 + max_by / 2);
      ellipse_b.attr("ry", max_by / 2);
      ellipse_b.attr("rx", 50);
      svg.append("svg:defs").selectAll("marker").data(["plain", "dotted"]).enter().append("svg:marker").attr("id", String).attr("viewBox", "0 -5 10 10").attr("refX", 15).attr("refY", -1.5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("svg:path").attr("d", "M0,-5L10,0L0,0");
      path = svg.append("svg:g").selectAll("path").data(force.links()).enter().append("svg:path").attr("fill", "none").attr("stroke", "#666").attr("stroke-width", "1.5px").attr("class", function(d) {
        return "link " + d.type;
      }).attr("marker-end", function(d) {
        return "url(#" + d.type + ")";
      });
      circle = svg.append("svg:g").selectAll("circle").data(force.nodes()).enter().append("svg:circle").attr("r", 6).attr("fill", "#ccc").attr("stroke", "#333").attr("stroke-width", "1.5px").call(force.drag);
      text = svg.append("svg:g").selectAll("g").data(force.nodes()).enter().append("svg:g");
      text.append("svg:text").attr("x", 8).attr("y", ".31em").attr("stroke", "#fff").attr("stroke-width", "3px").attr("stroke-opacity", ".8").attr("font", "10px sans-serif").attr("pointer-events", "none").attr("class", "shadow").text(function(d) {
        return d.name;
      });
      text.append("svg:text").attr("x", 8).attr("y", ".31em").attr("font", "10px sans-serif").attr("pointer-events", "none").text(function(d) {
        return d.name;
      });
      return force.on("tick", function(e) {
        circle.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
        return text.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
      }, path.attr("d", function(d) {
        var dr, dx, dy;
        dx = d.target.x - d.source.x;
        dy = d.target.y - d.source.y;
        dr = Math.sqrt(dx * dx + dy * dy) * 2;
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
      }));
    };

    return MorphismVis;

  })();

  vis_pool = {
    "ANY": new SimpleVis,
    "PTS": new SimplePointsVis,
    "MOR": new MorphismVis,
    "STR_SHOW": new CayleyTableVis
  };

  window.vis_pool = vis_pool;

  Action = (function() {

    function Action(op_id, vis_id) {
      this.op_id = op_id;
      this.vis_id = vis_id;
    }

    Action.prototype.perform_operation = function(object, args) {
      var operation;
      operation = operation_pool[this.op_id];
      return operation.exec(object, args);
    };

    Action.prototype.perform_visualization = function(op_data) {
      var vis;
      vis = vis_pool[this.vis_id];
      console.log(op_data);
      if (!(op_data instanceof Array)) {
        op_data = [op_data];
      }
      return vis.show(op_data);
    };

    return Action;

  })();

  determine_dp = function(provider_data) {
    var provider_id;
    provider_id = provider_data["id"];
    switch (provider_id) {
      case "Rem":
        return providers["Rem+"].parse(provider_data['args']);
      default:
        return new RawDataParser();
    }
  };

  process_data = function() {
    var action, action_id, args, op_data, provider_data, structure;
    action_id = arguments[0], provider_data = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    structure = determine_dp(provider_data);
    action = actions_pool[action_id];
    op_data = action.perform_operation(structure, args);
    return action.perform_visualization(op_data);
  };

  providers = {
    "Rem+": new AddRemProvider,
    "*": new RawDataParser()
  };

  actions_pool = {
    "mult": new Action("a*b", "PTS"),
    "show_structure": new Action("ID", "STR_SHOW")
  };

  window.process_data = process_data;

}).call(this);
